repositories {
    jcenter()
    mavenCentral()
    maven { url "http://dl.bintray.com/typesafe/maven-releases" }
}

group 'net.darthgeek.yggdrasil'
version '0.0.0-SNAPSHOT'

apply plugin: 'groovy'
apply plugin: 'war'
apply plugin: 'announce'
apply plugin: 'findbugs'
apply plugin: 'jacoco'

// TODO clean this up and refactor a bit

repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
    maven {
        url = "http://repository.jboss.org/nexus/content/groups/public-jboss/"
        url = "http://download.java.net/maven/2/"
    }
}

ext {
    codacyProjectToken = project.hasProperty('projectToken') ? project.projectToken : 'null'
    limits = [
            'instruction': 0,
            'branch'     : 0,
            'line'       : 0,
            'complexity' : 0,
            'method'     : 0,
            'class'      : 0
    ]
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

compileJava.options.compilerArgs.add '-parameters'
compileTestJava.options.compilerArgs.add '-parameters'

configurations {
    codacy
}

dependencies {
    compile project(':yggdrasil-javascript')
    compile "org.springframework:spring-context:$rootProject.ext.springVersion"
    compile "org.springframework:spring-context-support:$rootProject.ext.springVersion"
    compile "org.springframework:spring-webmvc:$rootProject.ext.springVersion"
    compile "org.springframework:spring-orm:$rootProject.ext.springVersion"
    compile "org.springframework:spring-aop:$rootProject.ext.springVersion"
    compile "org.springframework:spring-messaging:$rootProject.ext.springVersion"
    compile "org.springframework:spring-websocket:$rootProject.ext.springVersion"
    compile "org.springframework.security:spring-security-web:$rootProject.ext.springSecurityVersion"
    compile "org.springframework.security:spring-security-config:$rootProject.ext.springSecurityVersion"
    compile "cglib:cglib:3.2.4"
    compile "javax.inject:javax.inject:1"
    compile "org.thymeleaf:thymeleaf:$rootProject.ext.thymeleafVersion"
    compile "org.thymeleaf:thymeleaf-spring4:$rootProject.ext.thymeleafVersion"
    compile "org.thymeleaf.extras:thymeleaf-extras-springsecurity4:$rootProject.ext.thymeleafVersion"
    compile "com.google.code.findbugs:jsr305:3.0.0"
    compile "com.google.code.findbugs:annotations:3.0.0"
    compile "com.fasterxml.jackson.core:jackson-databind:$rootProject.ext.jacksonVersion"

    compile "org.slf4j:slf4j-api:1.7.10"
    compile "org.slf4j:jul-to-slf4j:1.7.10"
    compile "org.slf4j:jcl-over-slf4j:1.7.10"
    compile "ch.qos.logback:logback-classic:1.1.2"

    providedCompile "javax:javaee-web-api:7.0"

    testCompile("junit:junit:4.+") {
        exclude group: "org.hamcrest"
    }
    testCompile "org.hamcrest:hamcrest-library:1.3"
    testCompile "org.springframework:spring-test:$rootProject.ext.springVersion"
    testCompile "org.mockito:mockito-core:1.+"

    codacy 'com.codacy:codacy-coverage-reporter:1.0.7'
    codacy 'com.typesafe.netty:netty-http-pipelining:1.1.2'
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

jacoco {
    toolVersion = "0.7.7.201606060606"
    reportsDir = file("${buildDir}/test-results/jacoco")
}



jacocoTestReport {
    executionData = fileTree(dir: "${buildDir}", include: '**/jacoco/*.exec')

    reports {
        xml.enabled true
        xml.destination "${buildDir}/test-results/jacoco/${archivesBaseName}.xml"
        csv.enabled false
        html.enabled true
        html.destination "${buildDir}/test-results/jacoco/html"
    }

    doLast {
        def report = reports.xml.destination
        logger.lifecycle("Checking coverage results: ${report}")

        def parser = new XmlParser()
        parser.setFeature("http://apache.org/xml/features/nonvalidating/load-external-dtd", false);
        parser.setFeature("http://apache.org/xml/features/disallow-doctype-decl", false)
        def results = parser.parse(report)

        def percentage = {
            if (it == null) {
                return 100
            }
            def covered = it.'@covered' as Double
            def missed = it.'@missed' as Double
            ((covered / (covered + missed)) * 100).round(2)
        }

        def counters = results.counter
        def metrics = [:]
        metrics << [
                'instruction': percentage(counters.find { it.'@type'.equals('INSTRUCTION') }),
                'branch'     : percentage(counters.find { it.'@type'.equals('BRANCH') }),
                'line'       : percentage(counters.find { it.'@type'.equals('LINE') }),
                'complexity' : percentage(counters.find { it.'@type'.equals('COMPLEXITY') }),
                'method'     : percentage(counters.find { it.'@type'.equals('METHOD') }),
                'class'      : percentage(counters.find { it.'@type'.equals('CLASS') })
        ]


        def failures = []
        def success = []
        metrics.each {
            def limit = limits[it.key]
            if (it.value < limit) {
                failures.add("- ${it.key} coverage rate is: ${it.value}%, minimum is ${limit}%")
            } else {
                success.add("- ${it.key} coverage rate is: ${it.value}%, minimum is ${limit}%")
            }
        }

        logger.quiet("------------------ Code Coverage Passes -----------------------")
        success.each { logger.quiet(it) }
        logger.quiet("---------------------------------------------------------------")
        if (failures) {
            logger.quiet("------------------ Code Coverage Failed -----------------------")
            failures.each { logger.quiet(it) }
            logger.quiet("---------------------------------------------------------------")
            throw new GradleException("Code coverage failed")
        } else {
            logger.quiet("Passed Code Coverage Checks")
        }
    }
}

check.dependsOn jacocoTestReport

artifacts {
    archives jar, sourcesJar
}

findbugs {
    ignoreFailures = true
    toolVersion = "3.0.1"
    sourceSets = [sourceSets.main]
    effort = "max"
    reportLevel = "low"
}

tasks.withType(FindBugs) {
    reports {
        xml.enabled false
        html.enabled true
        //html.stylesheet resources.text.fromFile('config/xsl/findbugs-custom.xsl')
    }
}

task uploadCoverageToCodacy(type: JavaExec, dependsOn: jacocoTestReport) {
    main = "com.codacy.CodacyCoverageReporter"
    classpath = configurations.codacy
    args = [
            "-l",
            "Java",
            "-r",
            "${buildDir}/test-results/jacoco/${archivesBaseName}.xml",
            "--projectToken",
            codacyProjectToken
    ]
}

task(codacyDepsize) << {
    def size = 0;
    configurations.codacy.collect { it.length() / (1024 * 1024) }.each { size += it }
    println "Total dependencies size: ${Math.round(size * 100) / 100} Mb"

    configurations
            .codacy
            .sort { -it.length() }
            .each { println "${it.name} : ${Math.round(it.length() / (1024) * 100) / 100} kb" }
}

task(codacyLocs) << {
    configurations.codacy.each {
        String jarName = it
        println jarName
    }
}

gradle.taskGraph.afterTask { Task task, TaskState state ->
    if (state.failure) {
        announce.announce("':${task.name}' FAILED", "local")
    } else {
        announce.announce("':${task.name}' succeeded", "local")
    }
}
